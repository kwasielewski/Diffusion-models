name: Export Pluto notebooks
on:
    push:
        branches:
            - main
            - master
    workflow_dispatch:

# When two jobs run in parallel, cancel the older ones, to make sure that the website is generated from the most recent commit.
concurrency:
    group: pluto-export
    cancel-in-progress: true

# This action needs permission to write the exported HTML file to the gh-pages branch.
permissions:
    contents: write
    # (all other permission fields default to "none")

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout this repository
              uses: actions/checkout@v4

            - name: Install Julia
              uses: julia-actions/setup-julia@v2
              with:
                  version: "1" # This will automatically pick the latest Julia version

            - name: Cache Julia artifacts & such
              uses: julia-actions/cache@v2
              with:
                cache-registries: "true"

            # We set up a folder that Pluto can use to cache exported notebooks. If the notebook file did not change, then Pluto can take the exported file from cache instead of running the notebook.
            - name: Set up notebook state cache
              uses: actions/cache@v4
              with:
                  path: pluto_state_cache
                  key: ${{ runner.os }}-pluto_state_cache-v2-${{ hashFiles('**/Project.toml', '**/Manifest.toml', '.github/workflows/*' ) }}-${{ hashFiles('**/*jl') }}
                  restore-keys: |
                      ${{ runner.os }}-pluto_state_cache-v2-${{ hashFiles('**/Project.toml', '**/Manifest.toml', '.github/workflows/*' ) }}


            - name: Run & export Pluto notebooks
              run: |
                julia -e 'using Pkg
                  Pkg.activate(mktempdir())
                  Pkg.add("Pluto")
                  using Pluto
                  s = Pluto.ServerSession();
                  nb = Pluto.SessionActions.open(s, "./presentation.jl"; run_async=false)
                  html_contents = Pluto.generate_html(nb; binder_url_js="undefined")

                  open("presentation.html", "w") do file
                    write(file, html_contents)
                  end
                  '
            - name: Upload presentation.html as artifact
              uses: actions/upload-artifact@v3
              with:
                name: presentation
                path: presentation.html